#pragma once
//----------------------------------------------------------------------//
#include "LinkedList.h"
//----------------------------------------------------------------------//

template <class T> class Queue {
public:
	Queue(){}
	~Queue();
private:
	LinkedList<T> List;
public:
	int  Size();
	bool IsEmpty();

	void Enqueue(T data);
	T    Dequeue();

	void Clear();
};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Destructor...
//-----------------------------------------------------------------------------
template <class T> Queue<T>::~Queue()
{
	Clear();
}

//-----------------------------------------------------------------------------
// Obtains the number of elements in the stack
//-----------------------------------------------------------------------------
template <class T> int Queue<T>::Queue()
{
	return List.Size();
}

//-----------------------------------------------------------------------------
// Determines whether the stack is empty
//-----------------------------------------------------------------------------
template <class T> bool Queue<T>::IsEmpty()
{
	return List.IsEmpty();
}

//-----------------------------------------------------------------------------
// Adds a value to the top of the stack
//-----------------------------------------------------------------------------
template <class T> void Queue<T>::Enqueue(T data)
{
	List.Push(data);
}

//-----------------------------------------------------------------------------
// Returns but does not delete the value at the top of the stack
//-----------------------------------------------------------------------------
template <class T> T Queue<T>::Dequeue()
{
	if(List.Size() == 0)
		throw EmptyQueueException(__FILE__, __LINE__);

	return List.Delete(List.Size() - 1);
}

//-----------------------------------------------------------------------------
// Deletes all elements from the stack
//-----------------------------------------------------------------------------
template <class T> void Queue<T>::Clear()
{
	List.Clear();
}
