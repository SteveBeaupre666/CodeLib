#include "WinTimer.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor...
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
CWinTimer::CWinTimer()
{
	Reset();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor...
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
CWinTimer::~CWinTimer()
{
	Stop();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Reset member variables...
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CWinTimer::Reset()
{
	TimerID    = 0;
	TimerSpeed = 0;
	TimerProc  = NULL;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Return true if the timer is on
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CWinTimer::IsRunning()
{
	return TimerID > 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Start or restart the timer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CWinTimer::Start(UINT Speed, TIMERPROC tp)
{
	if(!tp){
		Reset();
		return FALSE;
	}

	if(IsRunning())
		KillTimer(NULL, TimerID);

	TimerProc  = tp;
	TimerSpeed = Speed;
	TimerID    = SetTimer(NULL, 0, TimerSpeed, tp);

	return IsRunning();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Kill the timer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CWinTimer::Stop()
{
	if(IsRunning()){
		KillTimer(NULL, TimerID);
		Reset();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Return the timer id
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
UINT CWinTimer::GetID()
{
	return TimerID;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Return the timer speed
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
UINT CWinTimer::GetSpeed()
{
	return TimerSpeed;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Reset the timer speed (create a new timer with a different speed but don't change tp)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CWinTimer::SetSpeed(UINT Speed)
{
	if(IsRunning() && TimerProc != NULL){
		KillTimer(NULL, TimerID);
		TimerSpeed = Speed;
		TimerID    = SetTimer(NULL, 0, TimerSpeed, TimerProc);
	}
}



